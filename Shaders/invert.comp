#version 450

// =========================================
layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

// =========================================
layout (binding = 1) uniform Camera
{
    mat4 view;
    mat4 proj;
    mat4 viewProj;
} camera;

// =========================================
layout (binding = 2) uniform Lights
{
    Light lights[MAX_NUM_LIGHTS];
    uint numLights;
} lightBuffer;

// =========================================
struct Sphere
{
    vec3 pos;
    float radius;
    vec3 diffuse;
    float specular;
    int id;
};

struct Plane
{
    vec3 normal;
    float distance;
    vec3 diffuse;
    float specular;
    int id;
};

layout (std140, binding = 3) buffer Spheres
{
    Sphere spheres[];
};

layout (std140, binding = 4) buffer Planes
{
    Plane planes[];
};

// =========================================
void main()
{
    ivec2 dim = imageSize(resultImage);
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(uv, 0.0, 0.0));
}
