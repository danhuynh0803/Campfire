#version 450

// =========================================
layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

#define EPSILON 0.0001
#define INF 1000.0

// =========================================
layout (binding = 1) uniform Camera
{
    mat4 view;
    mat4 proj;
    mat4 viewProj;
} camera;

// =========================================
// TODO move to a global info
const int MAX_NUM_LIGHTS = 100;
struct Light
{
    vec4 pos;
    vec4 color;
    vec3 dir;
    float intensity;
};

layout (binding = 2) uniform Lights
{
    Light lights[MAX_NUM_LIGHTS];
    uint numLights;
} lightBuffer;

// =========================================
struct Sphere
{
    vec3 pos;
    float radius;
    vec3 diffuse;
    float specular;
    int id;
};

layout (std140, binding = 3) buffer Spheres
{
    Sphere spheres[];
};

// =========================================
struct Plane
{
    vec3 normal;
    float distance;
    vec3 diffuse;
    float specular;
    int id;
};

layout (std140, binding = 4) buffer Planes
{
    Plane planes[];
};

bool SphereIntersect(in vec3 rayO, in vec3 rayD, in Sphere sphere, inout float t)
{
    vec3 oc = rayO - sphere.pos;
    float a = dot(rayD, rayD);
    float b = 2.0f * dot(oc, rayD);
    float c = dot(oc, oc) - sphere.radius*sphere.radius;

    // Roots exist if discriminant value >= 0
    float disc = b*b - 4*a*c;
    if (disc >= 0)
    {
        float invDenom = 0.5f / a; // 1/(2a)
        // Get closest value of intersection which is stored as lowest t value
        float tPos = (b + sqrt(disc)) * invDenom;
        float tNeg = (b - sqrt(disc)) * invDenom;

        //t = tPos >= EPSILON ? tPos : t;
        //t = tNeg >= EPSILON && tNeg < t ? tNeg : t;
        t = (-b - sqrt(disc)) / (2.0f * a);

        return true;
    }

    return false;
}

vec3 RenderScene(inout vec3 rayO, inout vec3 rayD)
{
    int hitId = -1;
    float currT = INF;
    for (int i = 0; i < spheres.length(); ++i)
    {
        float t = INF;
        if (SphereIntersect(rayO, rayD, spheres[i], t))
        {
            if ((t > EPSILON) && (t < currT))
            {
                hitId = spheres[i].id;
                currT = t;
            }
        }
    }

    // Get color of hit id
    for (int i = 0; i < spheres.length(); ++i)
    {
        if (hitId == i)
        {
            Sphere sphere = spheres[hitId];
            vec3 hitPos = rayO + currT*rayD;
            vec3 normal = (hitPos - sphere.pos) / sphere.radius;
            //vec3 l = normalize(lightBuffer.lights[0].pos.xyz - hitPos);
            vec3 l = normalize(vec3(0, 0, 5) - hitPos);

            return spheres[hitId].diffuse * max(0.0f, dot(l, normal));
        }
    }

    return vec3(0.1f);
}

// =========================================
void main()
{
    ivec2 dim = imageSize(resultImage);
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

    vec3 lookAt = vec3(0.0f);
    mat4 invView = inverse(camera.view);
    vec3 rayO = vec3(invView[3][0], invView[3][1], invView[3][2]);
    //vec3 rayO = camera.view[3].xyz;
    // TODO pass into camera ubo
    float aspectRatio = 16.0f / 9.0f;

    vec3 rayD = normalize(
          vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2])
        + vec3((2.0f*uv - 1.0f) * vec2(aspectRatio, 1.0f), 1.0f)
        - rayO
        //vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2])
        //vec3(invView[0][2], invView[1][2], -invView[2][2])
        //invView[2].xyz
        //vec3((2.0f*uv - 1.0f) * vec2(aspectRatio, 1.0f), 1.0f)
    );

    vec3 color = RenderScene(rayO, rayD);

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0f));
}
